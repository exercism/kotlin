subprojects {
  afterEvaluate { Project project ->
    sourceSets {
      // Verify that the tests are working by running them against the example code.
      // By replacing the "main" sourceSet with the example code we avoid any collisions
      //   with solution code that may have been included as a "starter" (e.g. etl).
      main {
        kotlin.srcDirs = ["src/example/kotlin"]
      }
      project["compileKotlin"].doFirst { compileTask ->
        println "  (source = " + compileTask.source.asPath + ")"
      }

      starterSource {
        kotlin.srcDirs = ["src/main/kotlin"]
      }
      project["compileStarterSourceKotlin"].doFirst { compileTask ->
        println "  (source = " + compileTask.source.asPath + ")"
      }

      // In lieu of being able to disable @Ignore in JUnit tests, we filter
      // those annotations, placing the edited tests in the path named here.
      test {
        kotlin.srcDirs = ["build/gen/test/kotlin"]
      }
      project["compileTestKotlin"].doFirst { compileTask ->
        println "  (test source = " + compileTask.source.asPath + ")"
      }
    }

    task copyTestsFilteringIgnores(type: Copy) {
      from "src/test/kotlin"
      into "build/gen/test/kotlin"
      filter { line -> line.contains("@Ignore") ? "" : line }
    }

    test.dependsOn(copyTestsFilteringIgnores)
  }
}
